using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Permissions;
using System.Text;
using System.Threading.Tasks;

namespace hiiii
{
    internal class Program
    {
        //static string[] board = new string[9];

        static void Main(string[] args)
        {
            game();
            Console.ReadKey();
        }

        static void game()
        {
            int program = 1;
            Random r = new Random();
            int first = r.Next(1, 3);
            int gameno = 0;
            string[] board = new string[9];
            List<string> score = new List<string>();
            string printscore = "";
            string filename = "";
            while (program == 1)
            {
                Console.WriteLine("Start new game");
                board = new string[9]; //hmm
                boardinitialize(board);
                boarddisplay(board, 1);
                int game = 1;
                int move = 0;
                string[] player = {"This is just here so its Player[1] and Player[2] rather than Player[0] and Player[1]", "YOU", "AIRA" };
                string[] playerchar = {"", "D", "I" };
                int playing = first;
                gameno = gameno + 1;
                filename = "/Users/macbook/Downloads/19 Sep/tictactoehistorygame" + gameno + ".txt";
                printboard(board, filename, "Game Number: " + gameno, "Current Score: " + printscore, 0, 1);
                printscore = "";
                while (game == 1)
                {
                    move = move + 1;
                    string turn = "";

                    turn = player[playing];
                    Console.WriteLine("");
                    Console.WriteLine(turn + " TURN:");
                    //boardadd(playerinput(), "D", board);
                    //boardadd(randomopp(board), "D", board);
                    //boardadd(thinker(board, "D", "I"), "I", board);
                    if(turn == player[1])
                        boardadd(playerinput(), playerchar[1], board);
                    if(turn == player[2])
                        boardadd(thinker(board, playerchar[1], playerchar[2]), playerchar[2], board);
                    boarddisplay(board, 1);
                    printboard(board, filename, turn + "'s turn, move: " + move, "", 1, 0);
                    if (wincheck(board) > 0)
                    {
                        if (wincheck(board) == 1)
                        {
                            printboard(board, filename, turn + " WON!!!", "", 0, 1);
                            score.Add(playerchar[playing]);
                        }
                        if (wincheck(board) == 2)
                        {
                            printboard(board, filename, "ITS A TIE!!!", "", 0, 1);
                            score.Add("TIE");
                        }
                        game = 0;
                        Console.ReadKey();
                        break;
                    }
                    if (playing == 1)
                        playing = 2;
                    else if (playing == 2)
                        playing = 1;
                }
                int[] playerscores = { 0, 0, 0 };
                for (int x = 0; x < score.Count; x++)
                {
                    printscore = printscore + score[x] + ", ";
                    if (playerchar[1] == (score[x]))
                        playerscores[1] = playerscores[1] + 1;
                    if (playerchar[2] == (score[x]))
                        playerscores[2] = playerscores[2] + 1;
                }
                if (playerscores[1] == 3 || playerscores[2] == 3)
                {
                    if (playerscores[1] > playerscores[2])
                        printboard(board, filename, player[1] + "WON BEST OF 5!!", "", 0, 1);
                    if (playerscores[1] < playerscores[2])
                        printboard(board,filename, player[2] + "WON BEST OF 5!!", "", 0, 1);
                    break;
                }
                if(score.Count == 5)
                {
                    printboard(board,filename, "ITS A TIE NOBODY WON!!!!!", "", 0, 1);
                    break;
                }
                if (first == 1)
                    first = 2;
                else if (first == 2)
                    first = 1;
            }
            //printboard(board, "/Users/macbook/Downloads/19 Sep/tictactoehistory.txt", "Thats the end of this session!", "", 0, 1);
        }

        static string[] boardinitialize(string[] board)
        {
            for (int x = 0; x < board.Length; x++)
            {
                if (board[x] == null)
                {
                    board[x] = " ";
                }
            }
            return board;
        }

        static void boarddisplay(string[] board, int numbergrid)
        {
            Console.Clear();
            int three = 0;
            for (int x = 0; x < board.Length; x++)
            {
                if (three == 1 || three == 2)
                    Console.Write(" | ");
                if (three == 3)
                {
                    three = 0;
                    Console.WriteLine(" ");
                    Console.WriteLine("-----------------");
                }
                if(numbergrid == 1)
                    if (board[x] == " ")
                        Console.Write(" " + (x + 1) + " ");
                    else
                        Console.Write(" " + board[x] + " ");
                if(numbergrid == 0)
                    Console.Write(" " + board[x] + " ");
                three++;
            }
            Console.WriteLine("");
            //for (int x = 0; x < board.Length; x++) //DEBUGGING
                //Console.Write(board[x] + ", ");
        }

        static int inputanum()
        {
            int program = 1;
            int n = 0;
            while (program == 1)
            {
                Console.WriteLine("ENTER YOUR NUMBER");
                string inputt = Console.ReadLine();
                program = 0;
                try
                {
                    n = int.Parse(inputt);
                }
                catch
                {
                    Console.WriteLine("INVALID TRY AGAIN");
                    program = 1;
                }
            }
            return n;
        }

        static int playerinput()
        {
            int program = 1;
            int x = 0;
            while (program == 1)
            {
                program = 0;
                x = inputanum();
                if (x <= 0 || x > 9)
                {
                    Console.WriteLine("PLEASE INPUT A NUM FROM 1 TO 9");
                    program = 1;
                }
            }
            return x - 1;
        }

        static string[] boardadd(int input, string character, string[] board)
        {
            if (board[input] == " ")
            {
                board[input] = character;
            }
            return board;
        }

        static int wincheck(string[] board)
        {
            int win = 0;
            int[,] wincombos = { { 0, 1, 2 }, { 3, 4, 5 }, { 6, 7, 8 } , { 0, 3, 6 }, { 1, 4, 7 }, { 2, 5, 8 }, { 0, 4, 8 }, { 2, 4, 6 } };
            //Console.WriteLine(wincombos.Length); //WHY IS IT LIKE THIS
            //for (int x = 0; x < wincombos.Length - 1; x++)
            for (int x = 0; x < 8; x++)
            {
                int wincon = 0;

                if (board[wincombos[x, 0]] == board[wincombos[x, 1]] && board[wincombos[x, 0]] != " ")
                    wincon = wincon + 1;
                if (board[wincombos[x, 1]] == board[wincombos[x, 2]] && board[wincombos[x, 1]] != " ")
                    wincon = wincon + 1;
                if (board[wincombos[x, 0]] == board[wincombos[x, 2]] && board[wincombos[x, 0]] != " ")
                    wincon = wincon + 1;
                if (board[wincombos[x, 0]] == board[wincombos[x, 1]] && board[wincombos[x, 1]] != " ")
                    wincon = wincon + 1;
                if (board[wincombos[x, 1]] == board[wincombos[x, 2]] && board[wincombos[x, 2]] != " ")
                    wincon = wincon + 1;
                if (board[wincombos[x, 0]] == board[wincombos[x, 2]] && board[wincombos[x, 2]] != " ")
                    wincon = wincon + 1;

                //Ties
                int tiecon = 0;
                for (int tc = 0; tc < board.Length; tc++)
                {
                    if (board[tc] != " ")
                        tiecon = tiecon + 1;
                }
                if (tiecon == 9)
                {
                    win = 2;
                    //break;
                }

                if (wincon == 6)
                {
                    win = 1;
                    break;
                }

            }
            return win;
        }

        static int randomopp(string[] board)
        {
            int program = 1;
            Random r = new Random();
            int x = 0;
            while (program == 1)
            {
                program = 0;
                x = r.Next(0, board.Length);
                if (board[x] != " ")
                    program = 1;
            }
            //Console.WriteLine("WHYNOECKS " + x);
            return x;
        }


        static int thinker(string[] board, string player, string terminator)
        {
            string[] mindboard = new string[9];
            for (int tf = 0; tf < board.Length; tf++)
                mindboard[tf] = board[tf];

            List<int> possiblemoves = new List<int>();
            for (int tf = 0; tf < mindboard.Length; tf++)
                if (mindboard[tf] == " ")
                    possiblemoves.Add(tf);

            //Console.WriteLine("DEBOOGING MINDBOARD");
            //for (int tf = 0; tf < board.Length; tf++)
            //{
            //    Console.Write(mindboard[tf] + ", ");
            //}
            //Console.WriteLine("DEBOOGING POSSIBLEMOVES");
            //for (int tf = 0; tf < possiblemoves.Count; tf++)
            //{
            //    Console.Write(possiblemoves[tf] + ", ");
            //}

            List<int> possiblemovescore = new List<int>();

            for(int p = 0; p < possiblemoves.Count; p++)
            {
                string[] mindboard2 = new string[9];
                for (int tf = 0; tf < board.Length; tf++)
                    mindboard2[tf] = board[tf];
                mindboard2[possiblemoves[p]] = terminator;
                possiblemovescore.Add(thinking(mindboard2, player, terminator, "ME", 0, 0)); //ME OR OPP prob ME prob OPP prob ME
            }

            //DEBOOGING THE SCORECHECKING
            Console.WriteLine("Possible moves");
            for (int p = 0; p < possiblemoves.Count; p++)
            {
                Console.Write(possiblemoves[p] + ", ");
            }
            Console.WriteLine("Possible movescore");
            for (int p = 0; p < possiblemovescore.Count; p++)
            {
                Console.Write(possiblemovescore[p] + ", ");
            }
            Console.WriteLine("");

            int maxscore = -9999;
            int printx = -1;
            for (int pl = 0; pl < possiblemovescore.Count; pl++)
            {
                if (possiblemovescore[pl] > maxscore)
                {
                    maxscore = possiblemovescore[pl];
                    printx = possiblemoves[pl];
                }
            }
            return printx;

        }

        static int thinking(string[] board, string player, string terminator, string turn, int depth, int score)
        {
            if (wincheck(board) == 1 && turn == "ME")
                return 10 - depth;
            if (wincheck(board) == 1 && turn == "OPP")
                return depth - 10;
            if (wincheck(board) == 2 && turn == "ME")
                return 0;
            if (wincheck(board) == 2 && turn == "OPP")
                return 0;
            //if (wincheck(board) == 0)
                //Console.WriteLine("We are confirminf that scores are unchecked and we are at depth: " + depth);

            string nextturn = "";
            string nextchar = "";


            if (turn == "ME")
            {
                nextturn = "OPP";
                nextchar = player; 
            }
            if (turn == "OPP")
            {
                nextturn = "ME";
                nextchar = terminator;
            }


            string[] mindboard = new string[9];
            for (int tf = 0; tf < board.Length; tf++)
                mindboard[tf] = board[tf];

            List<int> possiblemoves = new List<int>();
            for (int tf = 0; tf < mindboard.Length; tf++)
                if (mindboard[tf] == " ")
                    possiblemoves.Add(tf);


            List<int> possiblemovescore = new List<int>();

            for (int p = 0; p < possiblemoves.Count; p++)
            {
                string[] mindboard2 = new string[9];
                for (int tf = 0; tf < board.Length; tf++)
                    mindboard2[tf] = board[tf];
                mindboard2[possiblemoves[p]] = nextchar; 
                //Console.WriteLine("possiblemoves p: " + p + " possiblemovescount: " + possiblemoves.Count);
                possiblemovescore.Add(thinking(mindboard2, player, terminator, nextturn, depth + 1, 0));
            }

            int minscore = 9999;
            int maxscore = -9999;
            for(int pl= 0; pl < possiblemovescore.Count; pl ++)
            {
                if (possiblemovescore[pl] < minscore)
                    minscore = possiblemovescore[pl];
                if (possiblemovescore[pl] > maxscore)
                    maxscore = possiblemovescore[pl];
            }

            if (turn == "ME")
                return minscore; 
            if (turn == "OPP")
                return maxscore;

            int x = -999; 
            //Console.WriteLine("uhm");
            return x;
        }

        static void printboard(string[] board, string filename, string toptext, string bottomtext, int yesboard, int writeconsole)
        { 
            using (StreamWriter sw = new StreamWriter(filename, true))
            {
                sw.WriteLine("");
                sw.WriteLine(toptext);
                int three = 0;
                if(yesboard == 1)
                    for (int x = 0; x < board.Length; x++)
                    {
                        if (three == 1 || three == 2)
                            sw.Write(" | ");
                        if (three == 3)
                        {
                            three = 0;
                            sw.WriteLine(" ");
                            sw.WriteLine("-----------------");
                        }
                        //sw.Write(board[x] + " ");
                        sw.Write(" " + board[x] + " ");
                        three++;
                    }
                sw.WriteLine(bottomtext);
                sw.WriteLine("");
                if (writeconsole == 1)
                {
                    Console.WriteLine(toptext);
                    Console.WriteLine(bottomtext);
                }
            }
        }
    }
}
